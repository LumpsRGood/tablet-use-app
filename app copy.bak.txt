import pandas as pd
import streamlit as st
import io
import numpy as np

# Title of the app
st.title("üìä Tablet Use Report Processor")

# File uploader
uploaded_file = st.file_uploader("üìÇ Upload your CSV file", type=["csv"])

if uploaded_file:
    try:
        # Load and clean the CSV
        df = pd.read_csv(uploaded_file)
        df.columns = df.columns.str.replace("\n", " ").str.strip()

        # Ensure required columns exist
        required_columns = {"Device Orders Report", "Staff Customer", "Base (Including Disc.)"}
        if not required_columns.issubset(df.columns):
            st.error(f"‚ùå Missing columns: {required_columns - set(df.columns)}")
            st.stop()

        # Rename columns for simplicity
        df = df.rename(columns={
            "Device Orders Report": "Device Orders",
            "Staff Customer": "Staff Customer",
            "Base (Including Disc.)": "Base"
        })

        # Normalize "Device Orders"
        df["Device Orders"] = df["Device Orders"].str.strip().str.lower().replace({
            "handheld": "handheld",
            "hand held": "handheld",
            "pos": "pos",
            "pos terminal": "pos"
        })
        df["Device Orders"] = df["Device Orders"].str.extract(r"(handheld|pos)", expand=False).fillna("unknown")

        # Ensure "Base" column is numeric
        df["Base"] = pd.to_numeric(df["Base"], errors="coerce").fillna(0)

        # Group and summarize data
        grouped_df = df.groupby(["Staff Customer", "Device Orders"])["Base"].sum().unstack(fill_value=0)

        # Ensure "handheld" and "pos" columns exist
        grouped_df = grouped_df.reindex(columns=["handheld", "pos"], fill_value=0)

        # Calculate percentages
        grouped_df["Total"] = grouped_df["handheld"] + grouped_df["pos"]
        grouped_df["Percentage Handheld Use"] = np.where(
            grouped_df["Total"] > 0,
            (grouped_df["handheld"] / grouped_df["Total"]) * 100,
            0
        ).round(2)

        # Format numeric values
        grouped_df["Handheld Total"] = grouped_df["handheld"].map("{:,.2f}".format)
        grouped_df["POS Total"] = grouped_df["pos"].map("{:,.2f}".format)
        grouped_df["Percentage Handheld Use"] = grouped_df["Percentage Handheld Use"].map("{:.2f}%".format)

        # Drop extra columns
        grouped_df = grouped_df[["Handheld Total", "POS Total", "Percentage Handheld Use"]]

        # Create the summary row
        total_handheld = grouped_df["Handheld Total"].astype(str).str.replace(",", "").astype(float).sum()
        total_pos = grouped_df["POS Total"].astype(str).str.replace(",", "").astype(float).sum()
        overall_percentage = (total_handheld / (total_handheld + total_pos) * 100) if (total_handheld + total_pos) > 0 else 0

        summary_row = pd.DataFrame({
            "Staff Customer": ["Overall Total"],
            "Handheld Total": [f"{total_handheld:,.2f}"],
            "POS Total": [f"{total_pos:,.2f}"],
            "Percentage Handheld Use": [f"{overall_percentage:.2f}%"]
        })

        # Reset index to include "Staff Customer"
        grouped_df = grouped_df.reset_index()

        # Append "Overall Total" row
        final_df = pd.concat([grouped_df, summary_row], ignore_index=True)

        # ======= Apply Styling =======
        def highlight_row(row):
            """Apply conditional formatting with better styling."""
            if row["Staff Customer"] == "Overall Total":
                return ["background-color: blue; color: white; font-weight: bold; border-top: 3px solid white;"] * len(row)

            percentage = float(row["Percentage Handheld Use"].replace('%', ''))
            
            if percentage >= 70:
                return ["background-color: #2ECC71; color: white;"] * len(row)  # Smooth green
            elif percentage >= 50:
                return ["background-color: #F4D03F; color: black;"] * len(row)  # Soft yellow
            return ["background-color: #E74C3C; color: white;"] * len(row)  # Vibrant red

        styled_df = (final_df.style
            .apply(highlight_row, axis=1)
            .set_table_styles([
                {"selector": "th", "props": [("background-color", "#1F2833"), ("color", "white"),
                                             ("font-size", "14px"), ("text-align", "center"),
                                             ("padding", "8px"), ("border-bottom", "2px solid white")]},
                {"selector": "td", "props": [("text-align", "right"), ("padding", "6px")]},
                {"selector": "tbody tr:hover", "props": [("background-color", "#D5DBDB")]}
            ])
        )

        # ======= Save Processed Report =======
        output = io.BytesIO()
        final_df.to_csv(output, index=False)
        output.seek(0)

        # ======= Streamlit UI =======
        st.write("üìå **Processed Data:** (Sortable & Editable)")
        st.data_editor(final_df, use_container_width=True)  # Interactive Table
        
        # Display Styled Table
        st.write("üé® **Styled View:**")
        st.write(styled_df)

        # Download Button (Moved below table)
        st.download_button(
            label="üì• Download Processed Report",
            data=output,
            file_name="processed_report.csv",
            mime="text/csv",
            help="Click to download the processed CSV file."
        )

    except Exception as e:
        st.error(f"‚ùå An error occurred while processing the file: {e}")
